class Solution {
    
    int answer;
    
    public void dfs(TreeNode n, int L, int R)
    {
        //our 'terminal state'
        if(n != null)
        {
          
          //If node.val falls outside the range [L, R], 
          //(for example node.val < L), then we know that only
          //the right branch could have nodes with value inside [L, R].
            if (L <= n.val && n.val <= R)
            {
                answer += n.val;
            }
            if (L < n.val)
            {
                dfs(n.left, L, R);
            }
            if (n.val < R)
            {
                dfs(n.right, L, R);
            }
        }
    }
    
    public int rangeSumBST(TreeNode root, int L, int R) {
        
        int answer = 0;
        
        dfs(root, L, R);
        
        return answer;
    }
}
